select * from EMP;
select * from DEPT;

-- EXERCICE 1

SELECT DEPTNO, ENAME, SAL, rank() OVER (PARTITION BY DEPTNO ORDER BY SAL DESC) as "RANG"
FROM EMP
WHERE DEPTNO = 10 OR DEPTNO = 30;


SELECT DEPTNO, ENAME, SAL, dense_rank() OVER (PARTITION BY DEPTNO ORDER BY SAL DESC) as "RANG"
FROM EMP
WHERE DEPTNO = 10 OR DEPTNO = 30;

SELECT DISTINCT DEPTNO, SAL, dense_rank() OVER (PARTITION BY DEPTNO ORDER BY SAL DESC) as "RANG"
FROM EMP
WHERE DEPTNO = 10 OR DEPTNO = 20
ORDER BY DEPTNO, SAL DESC;

SELECT JOB, SUM(SAL) AS "TOT_SAL_JOB"
FROM EMP
GROUP BY JOB;

SELECT DISTINCT JOB, SUM(SAL) OVER (PARTITION BY JOB) AS "TOT_SAL_JOB"
FROM EMP;

SELECT DISTINCT JOB, (SELECT SUM(SAL) FROM EMP E2 WHERE E1.JOB = E2.JOB) AS "TOT_SAL_JOB"
FROM EMP E1;

-- Le partition by est executé après que le select soit fait 

SELECT DEPTNO, JOB, SUM(SAL)
FROM EMP
GROUP BY ROLLUP (DEPTNO, JOB)
ORDER BY DEPTNO, SUM(SAL);

SELECT NVL(TO_CHAR(DEPTNO), 'TousDep') AS DEPARTEMENT, NVL(TO_CHAR(JOB), 'TousEmployes') AS JOB, SUM(SAL)
FROM EMP
GROUP BY ROLLUP (DEPTNO, JOB)
ORDER BY DEPTNO, SUM(SAL) DESC;

-- Tous département et job confondu => La somme totale tout en bas
-- Par département => rollup avec la somme par departement tout les null après chaque fin de département
-- Par département et job c'est les sommes a droit de chaque ligne de job

SELECT DECODE(DEPTNO, NULL, 'TousDep', DEPTNO) AS DEPARTEMENT, DECODE(JOB, NULL, 'TousEmployes', JOB) AS JOB, SUM(SAL)
FROM EMP
GROUP BY ROLLUP (DEPTNO, JOB)
ORDER BY DEPTNO, SUM(SAL) DESC;

-- EXERCICE 2
select * from clients;
select * from produits;
select * from temps;
select * from ventes;

-- 1
SELECT ANNEE, CL_R, CATEGORY, AVG(QTE * PU) AS CA_MOYEN 
FROM VENTES
JOIN CLIENTS ON CLIENTS.CL_ID = VENTES.CID
JOIN PRODUITS ON VENTES.PID = PRODUITS.PID
JOIN TEMPS ON VENTES.TID = TEMPS.TID
WHERE ANNEE = 2009 OR ANNEE = 2010
group by rollup (ANNEE, CL_R, CATEGORY);

-- 2
SELECT ANNEE, CL_R, CATEGORY, AVG(QTE * PU) AS CA_MOYEN 
FROM VENTES
JOIN CLIENTS ON CLIENTS.CL_ID = VENTES.CID
JOIN PRODUITS ON VENTES.PID = PRODUITS.PID
JOIN TEMPS ON VENTES.TID = TEMPS.TID
WHERE ANNEE = 2009 OR ANNEE = 2010
group by CUBE (ANNEE, CL_R, CATEGORY);

-- 3
SELECT ANNEE, CATEGORY, PNAME FROM (SELECT t.ANNEE, p.CATEGORY, p.PNAME, RANK() OVER (PARTITION BY t.ANNEE, p.CATEGORY ORDER BY SUM(QTE*PU) DESC) RANG
FROM VENTES v
JOIN PRODUITS p ON v.PID = p.PID
JOIN TEMPS t ON v.TID = t.TID
group by t.ANNEE, p.CATEGORY, p.PNAME)
WHERE RANG = 1;

-- 4
SELECT t.ANNEE, p.CATEGORY, SUM(QTE*PU) AS CA_TOTAL
FROM VENTES v
JOIN PRODUITS p ON v.PID = p.PID
JOIN TEMPS t ON v.TID = t.TID
group by rollup (t.ANNEE, p.CATEGORY)
having GROUPING_ID(t.annee, p.category) != 3
ORDER BY t.ANNEE, CA_TOTAL DESC;

-- 5
SELECT ANNEE, MOIS, CA_TOTAL 
FROM (
  SELECT t.ANNEE, t.MOIS, p.PNAME, SUM(QTE*PU) AS CA_TOTAL, rank() OVER (PARTITION BY t.ANNEE ORDER BY SUM(QTE*PU) DESC) AS RANG
  FROM VENTES v
  JOIN PRODUITS p ON v.PID = p.PID
  JOIN TEMPS t ON v.TID = t.TID
  WHERE p.PNAME LIKE 'Sirop d érable'
  GROUP BY t.ANNEE, t.MOIS, p.PNAME
  ORDER BY t.ANNEE, t.MOIS
  )
WHERE RANG = 1;

-- 6
SELECT t.ANNEE, c.CL_NAME, p.CATEGORY, SUM(QTE*PU) AS CA_TOTAL
FROM VENTES v
JOIN CLIENTS c ON c.CL_ID = v.CID
JOIN PRODUITS p ON v.PID = p.PID
JOIN TEMPS t ON v.TID = t.TID
GROUP BY GROUPING SETS ((t.ANNEE, c.CL_NAME), (t.ANNEE, p.CATEGORY));

-- 7
SELECT p.CATEGORY, SUM(QTE) AS QTE_VENDU_2010, NTILE(3) OVER (ORDER BY SUM(QTE) DESC) AS TIERS
FROM VENTES v
JOIN PRODUITS p ON v.PID = p.PID
JOIN TEMPS t ON v.TID = t.TID
WHERE t.ANNEE = 2010
GROUP BY p.CATEGORY;

-- 8
SELECT p.CATEGORY, t.MOIS, t.JOUR, SUM(QTE) AS QTE_5_JOURS, rank() OVER (PARTITION BY t.MOIS, p.CATEGORY ORDER BY SUM(QTE)) as RANG
FROM VENTES v
JOIN PRODUITS p ON v.PID = p.PID
JOIN TEMPS t ON v.TID = t.TID
WHERE t.ANNEE = 2010 AND t.JOUR BETWEEN 1 AND 5
GROUP BY p.CATEGORY, t.MOIS, t.JOUR
ORDER BY p.CATEGORY, t.MOIS, RANG;

SELECT CATEGORY, MOIS, JOUR, RANG FROM (
  SELECT p.CATEGORY, t.MOIS, t.JOUR, rank() OVER (PARTITION BY t.MOIS ORDER BY t.JOUR) as RANG
  FROM VENTES v
  JOIN PRODUITS p ON v.PID = p.PID
  JOIN TEMPS t ON v.TID = t.TID
  WHERE t.ANNEE = 2010
  ORDER BY p.CATEGORY, t.MOIS, t.JOUR)
WHERE RANG BETWEEN 1 AND 5 
group by CATEGORY, MOIS, JOUR, RANG;

-- Première version
SELECT p.CATEGORY, t.MOIS, SUM(QTE) AS QTE_5_JOURS
  FROM VENTES v
  JOIN PRODUITS p ON v.PID = p.PID
  JOIN TEMPS t ON v.TID = t.TID
  WHERE t.ANNEE = 2010 AND t.JOUR BETWEEN 1 AND 5
  GROUP BY p.CATEGORY, t.MOIS
  ORDER BY p.CATEGORY, t.MOIS;
  
-- Deuxième version
 SELECT CATEGORY, MOIS, RANG
 FROM (SELECT p.CATEGORY, t.MOIS, t.JOUR, dense_rank() OVER (PARTITION BY p.CATEGORY, t.MOIS ORDER BY t.JOUR) AS RANG
  FROM VENTES v
  JOIN PRODUITS p ON v.PID = p.PID
  JOIN TEMPS t ON v.TID = t.TID
  WHERE t.ANNEE = 2010
  GROUP BY p.CATEGORY, t.MOIS, t.JOUR)
WHERE RANG BETWEEN 1 AND 5;

-- LA BONNE --
 SELECT CATEGORY, MOIS, SUM(QTE) AS QTE_5_JOURS
 FROM (SELECT p.CATEGORY, QTE, t.MOIS, t.JOUR, dense_rank() OVER (PARTITION BY p.CATEGORY, t.MOIS ORDER BY t.JOUR) AS RANG
  FROM VENTES v
  JOIN PRODUITS p ON v.PID = p.PID
  JOIN TEMPS t ON v.TID = t.TID
  WHERE t.ANNEE = 2010
  GROUP BY p.CATEGORY, t.MOIS, t.JOUR, QTE)
WHERE RANG BETWEEN 1 AND 5
GROUP BY CATEGORY, MOIS
ORDER BY CATEGORY, MOIS;
-- LA BONNE --


SELECT p.CATEGORY, p.PNAME, t.MOIS, t.JOUR, v.QTE
FROM VENTES v
JOIN TEMPS t ON v.TID = t.TID
JOIN PRODUITS p on v.PID = p.PID
WHERE t.MOIS = 5 and p.CATEGORY like 'Boissons'
ORDER BY t.JOUR;